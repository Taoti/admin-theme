<?php

/**
 * @file
 * settings.theme
 */

use Drupal\Core\File\Exception\FileException;
use Drupal\Core\Form\FormStateInterface;
use Drupal\gin\GinSettings;

/**
 * Custom theme settings.
 */
function gin_form_system_theme_settings_alter(&$form, FormStateInterface $form_state, $form_id = NULL) {
  // Work-around for a core bug affecting admin themes. See issue #943212.
  if (isset($form_id)) {
    return;
  }

  /*
   * //////////////////////////
   * Unset unused settings.
   * * //////////////////////////
   */
  unset($form['logo']);

  /*
   * //////////////////////////
   * Move default theme settings to bottom.
   * * //////////////////////////
   */
  $form['favicon']['#open'] = FALSE;
  $form['favicon']['#weight'] = 98;
  $form['theme_settings']['#open'] = FALSE;
  $form['theme_settings']['#weight'] = 99;

  /*
   * //////////////////////////
   * General settings.
   * * //////////////////////////
   */
  /** @var \Drupal\gin\GinSettings $settings */
  $settings = \Drupal::classResolver(GinSettings::class);

  $form['custom_settings'] = [
    '#type' => 'details',
    '#open' => TRUE,
    '#title' => t('Settings'),
  ] + $settings->getSettingsForm();

  // Allow user settings.
  $form['custom_settings']['show_user_theme_settings'] = [
    '#type' => 'checkbox',
    '#title' => t('Users can override Gin settings'),
    '#description' => t('Expose the admin theme settings to users.'),
    '#default_value' => $settings->getDefault('show_user_theme_settings'),
  ];

  /*
   * //////////////////////////
   * Logo settings.
   * * //////////////////////////
   */
  $form['icon'] = [
    '#type' => 'details',
    '#title' => t('Logo'),
    '#open' => TRUE,
  ];

  // Make sure that after updating it is set to use the default logo.
  $defaultIconDefault = $settings->getDefault('icon_default') !== NULL ? theme_get_setting('icon_default') : TRUE;

  $form['icon']['icon_default'] = [
    '#type' => 'checkbox',
    '#title' => t('Use the default logo supplied by the theme'),
    '#default_value' => $defaultIconDefault,
    '#tree' => FALSE,
  ];
  $form['icon']['settings'] = [
    '#type' => 'container',
    '#states' => [
      // Hide the logo settings when using the default logo.
      'invisible' => [
        ':input[name="icon_default"]' => ['checked' => TRUE],
      ],
    ],
  ];
  $form['icon']['settings']['icon_path'] = [
    '#type' => 'textfield',
    '#title' => t('Path to custom logo'),
    '#default_value' => $settings->getDefault('icon_path'),
  ];
  $form['icon']['settings']['icon_upload'] = [
    '#type' => 'file',
    '#title' => t('Upload logo image'),
    '#maxlength' => 40,
    '#description' => t("If you don't have direct file access to the server, use this field to upload your logo."),
    '#upload_validators' => [
      'file_validate_extensions' => ['png gif jpg jpeg apng svg'],
    ],
  ];

  // Add submit/validate function.
  $form['#validate'][] = 'gin_form_system_theme_settings_alter_validate';

  // Attach custom library.
  $form['#attached']['library'][] = 'gin/settings';
}

/**
 * Validation for logo.
 */
function gin_form_system_theme_settings_alter_validate(array &$form, FormStateInterface $form_state) {
  $module_handler = \Drupal::service('module_handler');

  if (isset($form['icon']) && $module_handler->moduleExists('file')) {
    $file = _file_save_upload_from_form($form['icon']['settings']['icon_upload'], $form_state, 0);
    if ($file) {
      try {
        $filename = \Drupal::service('file_system')->copy($file->getFileUri(), \Drupal::config('system.file')->get('default_scheme') . '://');
        $form_state->setValue('icon_default', 0);
        $form_state->setValue('icon_path', $filename);
        $form_state->unsetValue('icon_upload');
      }
      catch (FileException $e) {
        \Drupal::logger('gin')->error($e->getMessage());
      }
    }
  }

  // When intending to use the default logo, unset the icon_path.
  if ($form_state->getValue('icon_default')) {
    $form_state->unsetValue('icon_path');
  }

  // If the user provided a path for a logo file, make sure a file
  // exists at that path.
  if ($form_state->getValue('icon_path')) {
    $path = _gin_validate_path_logo($form_state->getValue('icon_path'));

    if (!$path) {
      $form_state->setErrorByName('icon_path', t('The custom logo path is invalid.'));
    }
  }
}
